Kubernetes Notes: Using Google Cloud K8 Engine:

# kubectl get nodes

Eg: 
NAME                                          ROLES    AGE     VERSION
gke-gcpcluster-1-default-pool-c5882977-7029   Ready    <none>   2m23s   v1.21.9-gke.1002
gke-gcpcluster-1-default-pool-c5882977-hj72   Ready    <none>   2m23s   v1.21.9-gke.1002
gke-gcpcluster-1-default-pool-c5882977-pw4h   Ready    <none>   2m23s   v1.21.9-gke.1002

****Here the "roles" of a master node is not there.


# kubectl get nodes -o wide ( givs you more details on the nodes, like the Pub and Pvt IP, OS IMmage)

# kubectl explain pod | less ( to understand diff kind of objects to be explained from K8 document )

In K8 we always use Manifest files to create Pods using yml declarative approach.

# kubectl run pod1 --image nginx ( do not use this production environmnet)



To check how and to analyse the creation pod:

# kubectl describe pod pod1 | less         (just like inspect command from docker)

# kubectl get pods (specific to pods)

# kubectl get node (specific to node)

# kubectl get all   (best to use)

# kubectl delete pod pod1         (to delete selected pods

# kubectl delete -f pod-definition1.yml   (to delete all pods deployed, delete the yaml file associated pod )

# kubectl delete all --all    (to delete all, not good to use)

# kubectl create -f pod1-definition.yml  (to execute or run the manifest or object defintion files)

# kubectl exec -it mypod1 -- bash    ( to attach into the selected container and enter commands with in the container) 



Scenario1: Creation of Pod definition file

 	# mkdir mynewfiles
	#cd mynewfiles
	# ls
	# vim pod-definition1.yml
		i
---
apiVersion: v1
kind: Pod
metadata:
 name: nginx-pod
 labels:
  type: reverse-proxy
  author: edureka
spec:
 containers:
  - name: mynginx
    image: nginx


	# kubectl get pods   
 
// pod will be ready and running

	# kubectl get pods -o wide 

 // will give more information about pods with name of slave on which pod is available.
	
	# kubectl get nodes -o wide


****************************************************

Create another Jenkins pod:

	# vim pod-definition2.yml

		i

---
apiVersion: v1
kind: Pod
metadata:
 name: jenkins-pod
 labels:
  author: edureka
  type: CI-CD
spec:
 containers:
  - name: myjenkins
    image: jenkins


	# kubectl get pods
	#kubectl get pods -o wide
	# kubectl get nodes - o wide

******************************************************

Create replica Set
*******************************************

kubectl delete -f pod-definition1.yml
kubectl delete -f pod-definition2.yml
kubectl get pods
	# vim rc-definition.yml
		i

---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
 name: tomcat-rc
 labels:
  author: edureka
  type: webserver
spec:
 replicas: 3
 selector:
  matchLabels:
   type: webserver
 template:
  metadata:
   name: tomcat-pod
   labels:
    type: webserver
  spec:
   containers:
    - name: mytomcat
      image: tomcat
      ports:
       - containerPort: 8080
         hostPort: 9090

# kubectl get pods 
# kubectl get pods -o wide
# kubectl get all

*************************************************
Scaling of Pods using replica set

Method1:

Open the replica set  and change replicas to 5

save the file

execute this command:

	# kubectl replace -f rc-definition.yml


	# kubectl get pods

now desired replicas of tomcat will be running


Method2: direct command

increase or decrese the replica count by using this command

	# kubectl scale --replicas=2 -f rc-definition.yml

	# kubectl get pods

//only 2 pods will be running now


For opening desired ports:
gcloud compute firewall-rules create rule1 --allow tcp:8080
gcloud compute firewall-rules create rule1 --allow tcp:9090
gcloud compute firewall-rules create rule1 --allow tcp:30008

	
*************************************************************
Deployment:  ROLLING UPDATE

******************************
Highlevel kubernetes object called Deployment:


For this we use an object called Deployment Object

Create a new yaml file

	# vim deployment.yml
	i

apiVersion: apps/v1
kind: Deployment
metadata:
 name: nginx-deployment
 labels:
  author: edureka
  type: proxyserver
spec:
 replicas: 2
 selector:
  matchLabels:
   type: proxyserver
 template:
  metadata:
   name: nginx-pod
   labels:
    type: proxyserver
  spec:
   containers:
    - name: mynginx
      image: nginx:1.7.9
      ports:
       - containerPort: 80
         hostPort: 8888
	 
	 
	 
	 Or 
	 
	 
kind: Deployment
apiVersion: apps/v1
metadata:
  name: rolli
spec:
  replicas: 5
  minReadySeconds: 10 # wait for 45 sec before going to deploy next pod
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1  
      maxSurge: 1        # max number of pods to run for the deployment
  selector:
    matchLabels:
      type: kubeserve
  template:
    metadata:
      name: kube
      labels:
        type: kubeserve
    spec:
      containers:
       - name: app
         image: nginx
         ports:
          - containerPort: 80


# kubectl get all  

//will show deployment created.

# kubectl get pods

// will show all 3 pods created

# kubectl get deployment

// will show deployment which we just created information


Lets do rolling update now:

 # kubectl get all
	#  kubectl --record deployment.apps/nginx-deployment set image deployment.v1.apps/nginx-deployment mynginx=nginx:1.9.1

        # kubectl rollout history deployment deploymentName       (only depoyment name is added as set)
	
	# kubectl rollout status deployment deploymentName      (shows live deployment status)
	
	From K8 history:
	 REVISION  CHANGE-CAUSE
           1         <none>
           2         kubectl set image deployment rolli app=timjar3/pubrepo1:39 --record=true
           3         kubectl set image deployment rolli app=timjar3/pubrepo1:40 --record=true
	
	# kubectl rollout undo deployment deploymentName kubeserve --to-revision=1  (here deployment name and the             revision number is changed)
	
	# kubectl get pods

will give all pods, here you will see a duplicate rpelica is created for which evrsion is being updated and after which it will delete the earlier version replica. so users will not face any downtime

here copy the name of pod only begining : nginx-deployment

	# kubectl describe pods nginx-deployment | less

Clean Up

	# kubectl delete -f deployment.yml

*******************************************************

Creation of SERVICE OBJECTS

ClusterIP:
########

apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:                   # if you dont add type, default selects cluster IP
  selector:
    type: kubeserve     # this is the pod name you are providing service for
  ports:
    - protocol: TCP     # if you dont give TCP, auto selects TCP
      port: 80          # (pod port) (common practise to have same ports)
      targetPort: 80    # (existing container port, tomcat, nginx)
 
# kubcectl create -f clusterservice.yml
 
 
# kubectl get all                       ( there will be new service ip with port 80)

# kubectl get service	
	
# kubectl describe service my-service    (Endpoints with container IPs associated to the cluster, service                                                      IP, container will have common port "80")
	
	to check the service port of those pod if all the pods are assigned to same service Ip
 
 1) create a new pod to send request to service 
 
  # kubectl run -it frontend --image ubuntu
  
 2) get inside the pod to send a request
 
 # curl 10.72.14.44:80  (note the port is 80 with cluster IP) if curl not found instll
                        (# apt-get update && apt-get install curl -y)
Output: this v1 pod myrs-956vtm

3) this are to reach the pods with in the cluster
 
############################## 

NODEPORT:
#######

apiVersion: v1
kind: Service
metadata:
 name: tomy-service
spec:
 type: NodePort
 ports:
  - targetPort: 80
    port: 80
    nodePort: 30008
 selector:
   type: kubeserve
   
   

Create a jenkins pod definition file
	# vim pod-definition3.yml
---
apiVersion: v1
kind: Pod
metadata:
 name: jenkins-pod1
 labels:
  author: edureka
  type: CI
spec:
 containers:
  - name: myjenkins1
    image: jenkins
:wq!

	# kubcectl create -f pod-definition3.yml
	# kubectl get pods
	# kubectl get pods -o wide

**********************************************
Create nodeport service object

	# vim myservice.yml
	i
---
apiVersion: v1
kind: Service
metadata:
 name: jenkins-service
spec:
 type: NodePort
 ports:
  - targetPort: 8080
    port: 8080
    nodePort: 30008
 selector:
  author: edureka
  type: CI-CD

	# kubectl create -f myservice.yml
        # kubcectl get pods
	# kubectl get pods -o wide
	# kubectl get nodes -o wide
	# kubectl get all  // will give port information

go to browser with an ip:30008

	# kubectl delete -f myservice.yml
	# kubectl delete -f pod-definition3.yml


************************************************************

LoadBalancer:
########## *******************************************************
This is possible only if the cluster or K8 is on private cloud server
*****************************************************************


Create a new deployment definition file for nginx pod

# vim deployment.yml
i

---
apiVersion: apps/v1
kind: Deployment
metadata:
 name: nginx-deployment
 labels:
  author: edureka
  type: proxyserver
spec:
 replicas: 2
 selector:
  matchLabels:
   type: proxyserver
 template:
  metadata:
   name: nginx-pod
   labels:
    type: proxyserver
  spec:
   containers:
    - name: mynginx
      image: nginx:1.7.9
      ports:
       - containerPort: 80
         hostPort: 8888


	# kubectl get pods
	# kubectl get pods -o wide
	# kubectl get nodes -o wide


We will create a new definition file of kind Service object and type as LoadBalancer,
here take the label same as that of pod given in above deployment under template:
  metadata:
   name: nginx-pod
   labels:
    type: proxyserver   -- take this label information


	# vim myservice2.yml
	i
---
apiVersion: v1
kind: Service
metadata:
 name: nginx-myservice
 labels:
  type: proxy1
spec:
 type: LoadBalancer
 ports:
  - port: 80
    targetPort: 80
 selector:
  type: proxyserver (deployed meta name)


	# kubectl create -f myservice2.yml

	# kubectl get all

*********************************************	
NAME                      TYPE           CLUSTER-IP    EXTERNAL-IP    PORT(S)        AGE
service/kubernetes        ClusterIP      10.72.0.1     <none>         443/TCP        70m
service/nginx-myservice   LoadBalancer   10.72.8.254   35.226.96.70   80:31802/TCP   4m15s

as you can see under loadBalancer External Ip is created, use only external IP into browser to access the service and use only external IP from cluster IP to access from diff pod, node or cluster to access the same.

******************************************

// you will see a service with name as service/nginx-myservice
and external ip address as pending
re execute the command to see if external ip is generated

OR

	# kubectl describe service/nginx-myservice | less

OR

	# kubectl describe service nginx-myservice | less


These all commands will give complete information about service and we can find the load balancer ingress ip


Clean up

	# kubectl delete -f myservice2.yml
	# kubectl get all

	# kubectl delete -f deployment2.yml

	# kubectl get pods

*************************************************************************




































	






















